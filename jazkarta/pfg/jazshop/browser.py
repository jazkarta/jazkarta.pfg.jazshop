import csv
from collections import OrderedDict
from DateTime import DateTime
from StringIO import StringIO
from zope.browserpage import ViewPageTemplateFile
from Products.Five import BrowserView
from jazkarta.shop.api import get_order_from_id
from jazkarta.shop.browser.controlpanel import DateMixin, LazyFilteredOrders
from jazkarta.shop.utils import resolve_uid
from jazkarta.shop import storage
from plone.uuid.interfaces import IUUID


class JazShopPFGCallback(BrowserView):
    """ Redirect to form's thank-you page, if available. """
    index = ViewPageTemplateFile('thanks.pt')

    def __call__(self):
        order_id = self.request.form.get('order_id')
        error = self.request.form.get('error', None)
        self.error = None
        mail_not_sent = self.request.form.get('mail_not_sent', None)
        self.mail_not_sent = None
        if error != None:
            error.replace("_", " ") # decode error message
            self.error = error
        if mail_not_sent != None:
            mail_not_sent.replace("_", " ") # decode error message
            self.mail_not_sent = mail_not_sent

        self.cart_items = []
        self.cart_data = []
        self.amount = 0
        self.ship_method = None
        self.ship_charge = None
        self.taxes = None
        if order_id:
            # get cart data from stored order
            data = get_order_from_id(order_id)
            self.cart_items = data['items'].items()
            for order_item in self.cart_items:
                href = resolve_uid(order_item[1]['uid']).absolute_url()
                self.cart_data.append({'href': href,
                                       'quantity': order_item[1]['quantity'],
                                       'price': order_item[1]['price'],
                                       'name': order_item[1]['name']})
                self.amount += order_item[1]['quantity']*order_item[1]['price']

            if 'ship_charge' in data:
                self.amount += data['ship_charge']
                self.ship_charge = data['ship_charge']

            if 'taxes' in data:
                for tax_entry in data['taxes']:
                    self.amount += tax_entry['tax']
                self.taxes = data['taxes']

            if 'ship_method' in data:
                self.ship_method = data['ship_method']

        return self.index()


class JazShopPFGOrders(BrowserView, DateMixin):
    """ Redirect to form's thank-you page, if available. """
    index = ViewPageTemplateFile('orders.pt')
    orders_exist = False

    def __call__(self):
        csv_content = None
        selected_start = self.startDate()
        selected_end = self.endDate()
        order_list = LazyFilteredOrders(
            storage.get_storage(),
            start_date=selected_start,
            end_date=selected_end,
            csv=True
        )
        pfg_form = self.context.aq_parent
        form_uid = IUUID(pfg_form)
        # Filter orders to those generated by this form
        orders = [o for o in order_list
                           if form_uid in o.get('pfg_forms', {})]
        orders_csv = StringIO()

        if len(orders) > 0:
            self.orders_exist = True

            if self.request.form.get('export_csv') is None:
                return self.index()

        field_map = OrderedDict()
        for field in pfg_form._getFieldObjects():
            field_map[field.getId()] = field.fgField.widget.label

        if orders and len(orders) > 0:
            writer = csv.DictWriter(
                orders_csv,
                fieldnames=(
                    ['date', 'ship_to', 'ship_method',
                     'bill_first_name', 'bill_last_name',
                     'bill_street', 'bill_city', 'bill_state',
                     'bill_postal_code', 'bill_country', 'bill_phone',
                     'bill_email', 'items'] +
                    list(field_map.keys())),
                restval='',
                extrasaction='ignore',
                dialect='excel',
                quoting=csv.QUOTE_ALL
            )
            # Column titles
            ldict = {
                'date': 'Date',
                'ship_to': 'Shipping Address',
                'ship_method': 'Shipping Method',
                'bill_first_name': 'Billing First Name',
                'bill_last_name': 'Billing Last Name',
                'bill_street': 'Billing Street',
                'bill_city': 'Billing City',
                'bill_state': 'Billing State',
                'bill_postal_code': 'Billing Postal Code',
                'bill_country': 'Billing Country',
                'bill_phone': 'Billing Phone',
                'bill_email': 'Billing Email',
                'items': 'Items Purchased',
            }
            ldict.update(field_map)
            writer.writerow(ldict)

            for order in orders:
                bill = order.get('bill_to', {})
                ldict = {
                    'date': order['date'],
                    'ship_to': order.get('ship_to'),
                    'ship_method': order.get('ship_method'),
                    'bill_first_name': bill.get('first_name'),
                    'bill_last_name': bill.get('last_name'),
                    'bill_street': bill.get('address'),
                    'bill_city': bill.get('city'),
                    'bill_state': bill.get('state'),
                    'bill_postal_code': bill.get('zip'),
                    'bill_country': bill.get('country'),
                    'bill_phone': bill.get('phone'),
                    'bill_email': bill.get('email'),
                    'items': order.get('items'),
                }
                for k, v in list(ldict.items()):
                    if isinstance(v, unicode):
                        ldict[k] = v.encode('utf-8')
                ldict.update(order['pfg_forms'][form_uid])
                writer.writerow(ldict)

            csv_content = orders_csv.getvalue()
            orders_csv.close()

            # filename generation with date range included
            end = selected_end or order_list.latest_date
            start = selected_start or order_list.earliest_date
            end_str = end.strftime(u'%m%d%Y')
            start_str = start.strftime(u'%m%d%Y')
            if start_str == end_str:
                nice_filename = '%s_%s_%s' % (self.context.getId(),
                                              'form_orders', start_str)
            else:
                nice_filename = '%s_%s_%s_%s' % (
                    self.context.getId(), 'form_orders', start_str, end_str
                )

            self.request.response.setHeader("Content-Disposition",
                                            "attachment; filename=%s.csv" %
                                            nice_filename)
            self.request.response.setHeader("Content-Type", "text/csv")
            self.request.response.setHeader("Content-Length", len(csv_content))
            self.request.response.setHeader('Last-Modified',
                                            DateTime.rfc822(DateTime()))
            self.request.response.setHeader("Cache-Control", "no-store")
            self.request.response.setHeader("Pragma", "no-cache")
            self.request.response.write(csv_content)

        return csv_content
